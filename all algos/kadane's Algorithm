# Problem: Find the maximum sum of a contiguous subarray
# Pattern: Dynamic Programming / Greedy
# Time Complexity: O(n)
# Space Complexity: O(1)

def kadane_max_subarray(nums):
    # Initialize both current and max sum to first element
    current_sum = max_sum = nums[0]

    # Loop through the array starting from index 1
    for i in range(1, len(nums)):
        num = nums[i]

        # Either extend the previous subarray or start a new one from current num
        current_sum = max(num, current_sum + num)

        # Update the global maximum if needed
        max_sum = max(max_sum, current_sum)

    return max_sum


# Example Test Case
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
print("Maximum Subarray Sum:", kadane_max_subarray(nums))  # Output: 6
